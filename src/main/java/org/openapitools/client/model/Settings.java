/*
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to version 1 of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v1/companies/{companyId}/webhooks ```
 *
 * The version of the OpenAPI document: 1
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-30T16:56:39.721579+02:00[Europe/Amsterdam]")
public class Settings {
  public static final String SERIALIZED_NAME_BAND = "band";
  @SerializedName(SERIALIZED_NAME_BAND)
  private String band;

  public static final String SERIALIZED_NAME_ROAMING = "roaming";
  @SerializedName(SERIALIZED_NAME_ROAMING)
  private Boolean roaming;

  public static final String SERIALIZED_NAME_TIMEOUT = "timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private Integer timeout;

  public Settings() { 
  }

  public Settings band(String band) {
    
    this.band = band;
    return this;
  }

   /**
   * The preferred Wi-Fi Band, for use if the terminals support multiple bands. Possible values: All, 2.4GHz, 5GHz.
   * @return band
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The preferred Wi-Fi Band, for use if the terminals support multiple bands. Possible values: All, 2.4GHz, 5GHz.")

  public String getBand() {
    return band;
  }


  public void setBand(String band) {
    this.band = band;
  }


  public Settings roaming(Boolean roaming) {
    
    this.roaming = roaming;
    return this;
  }

   /**
   * Indicates whether roaming is enabled on the terminals.
   * @return roaming
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether roaming is enabled on the terminals.")

  public Boolean getRoaming() {
    return roaming;
  }


  public void setRoaming(Boolean roaming) {
    this.roaming = roaming;
  }


  public Settings timeout(Integer timeout) {
    
    this.timeout = timeout;
    return this;
  }

   /**
   * The connection time-out in seconds. Minimum value: 0
   * @return timeout
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The connection time-out in seconds. Minimum value: 0")

  public Integer getTimeout() {
    return timeout;
  }


  public void setTimeout(Integer timeout) {
    this.timeout = timeout;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Settings settings = (Settings) o;
    return Objects.equals(this.band, settings.band) &&
        Objects.equals(this.roaming, settings.roaming) &&
        Objects.equals(this.timeout, settings.timeout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(band, roaming, timeout);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Settings {\n");
    sb.append("    band: ").append(toIndentedString(band)).append("\n");
    sb.append("    roaming: ").append(toIndentedString(roaming)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


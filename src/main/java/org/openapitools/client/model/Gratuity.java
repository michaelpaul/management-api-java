/*
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to version 1 of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v1/companies/{companyId}/webhooks ```
 *
 * The version of the OpenAPI document: 1
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Gratuity
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-30T16:56:39.721579+02:00[Europe/Amsterdam]")
public class Gratuity {
  public static final String SERIALIZED_NAME_ALLOW_CUSTOM_AMOUNT = "allowCustomAmount";
  @SerializedName(SERIALIZED_NAME_ALLOW_CUSTOM_AMOUNT)
  private Boolean allowCustomAmount;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_PREDEFINED_TIP_ENTRIES = "predefinedTipEntries";
  @SerializedName(SERIALIZED_NAME_PREDEFINED_TIP_ENTRIES)
  private List<String> predefinedTipEntries = null;

  public static final String SERIALIZED_NAME_USE_PREDEFINED_TIP_ENTRIES = "usePredefinedTipEntries";
  @SerializedName(SERIALIZED_NAME_USE_PREDEFINED_TIP_ENTRIES)
  private Boolean usePredefinedTipEntries;

  public Gratuity() { 
  }

  public Gratuity allowCustomAmount(Boolean allowCustomAmount) {
    
    this.allowCustomAmount = allowCustomAmount;
    return this;
  }

   /**
   * Indicates whether one of the predefined tipping options is to let the shopper enter a custom tip. If **true**, only three of the other options defined in &#x60;predefinedTipEntries&#x60; are shown.
   * @return allowCustomAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether one of the predefined tipping options is to let the shopper enter a custom tip. If **true**, only three of the other options defined in `predefinedTipEntries` are shown.")

  public Boolean getAllowCustomAmount() {
    return allowCustomAmount;
  }


  public void setAllowCustomAmount(Boolean allowCustomAmount) {
    this.allowCustomAmount = allowCustomAmount;
  }


  public Gratuity currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * The currency that the tipping settings apply to.
   * @return currency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The currency that the tipping settings apply to.")

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public Gratuity predefinedTipEntries(List<String> predefinedTipEntries) {
    
    this.predefinedTipEntries = predefinedTipEntries;
    return this;
  }

  public Gratuity addPredefinedTipEntriesItem(String predefinedTipEntriesItem) {
    if (this.predefinedTipEntries == null) {
      this.predefinedTipEntries = new ArrayList<String>();
    }
    this.predefinedTipEntries.add(predefinedTipEntriesItem);
    return this;
  }

   /**
   * Tipping options the shopper can choose from if &#x60;usePredefinedTipEntries&#x60; is **true**. The maximum number of predefined options is four, or three plus the option to enter a custom tip. The options can be a mix of:  - A percentage of the transaction amount. Example: **5%** - A tip amount in minor units. Example: **500** for a EUR 5 tip.
   * @return predefinedTipEntries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tipping options the shopper can choose from if `usePredefinedTipEntries` is **true**. The maximum number of predefined options is four, or three plus the option to enter a custom tip. The options can be a mix of:  - A percentage of the transaction amount. Example: **5%** - A tip amount in minor units. Example: **500** for a EUR 5 tip.")

  public List<String> getPredefinedTipEntries() {
    return predefinedTipEntries;
  }


  public void setPredefinedTipEntries(List<String> predefinedTipEntries) {
    this.predefinedTipEntries = predefinedTipEntries;
  }


  public Gratuity usePredefinedTipEntries(Boolean usePredefinedTipEntries) {
    
    this.usePredefinedTipEntries = usePredefinedTipEntries;
    return this;
  }

   /**
   * Indicates whether the terminal shows a prompt to enter a tip (**false**), or predefined tipping options to choose from (**true**).
   * @return usePredefinedTipEntries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the terminal shows a prompt to enter a tip (**false**), or predefined tipping options to choose from (**true**).")

  public Boolean getUsePredefinedTipEntries() {
    return usePredefinedTipEntries;
  }


  public void setUsePredefinedTipEntries(Boolean usePredefinedTipEntries) {
    this.usePredefinedTipEntries = usePredefinedTipEntries;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Gratuity gratuity = (Gratuity) o;
    return Objects.equals(this.allowCustomAmount, gratuity.allowCustomAmount) &&
        Objects.equals(this.currency, gratuity.currency) &&
        Objects.equals(this.predefinedTipEntries, gratuity.predefinedTipEntries) &&
        Objects.equals(this.usePredefinedTipEntries, gratuity.usePredefinedTipEntries);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowCustomAmount, currency, predefinedTipEntries, usePredefinedTipEntries);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Gratuity {\n");
    sb.append("    allowCustomAmount: ").append(toIndentedString(allowCustomAmount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    predefinedTipEntries: ").append(toIndentedString(predefinedTipEntries)).append("\n");
    sb.append("    usePredefinedTipEntries: ").append(toIndentedString(usePredefinedTipEntries)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


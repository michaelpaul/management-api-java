/*
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to version 1 of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v1/companies/{companyId}/webhooks ```
 *
 * The version of the OpenAPI document: 1
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.EventUrl;

/**
 * Nexo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-30T16:56:39.721579+02:00[Europe/Amsterdam]")
public class Nexo {
  public static final String SERIALIZED_NAME_EVENT_URLS = "eventUrls";
  @SerializedName(SERIALIZED_NAME_EVENT_URLS)
  private EventUrl eventUrls;

  public static final String SERIALIZED_NAME_NEXO_EVENT_URLS = "nexoEventUrls";
  @SerializedName(SERIALIZED_NAME_NEXO_EVENT_URLS)
  private List<String> nexoEventUrls = null;

  public Nexo() { 
  }

  public Nexo eventUrls(EventUrl eventUrls) {
    
    this.eventUrls = eventUrls;
    return this;
  }

   /**
   * Get eventUrls
   * @return eventUrls
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EventUrl getEventUrls() {
    return eventUrls;
  }


  public void setEventUrls(EventUrl eventUrls) {
    this.eventUrls = eventUrls;
  }


  public Nexo nexoEventUrls(List<String> nexoEventUrls) {
    
    this.nexoEventUrls = nexoEventUrls;
    return this;
  }

  public Nexo addNexoEventUrlsItem(String nexoEventUrlsItem) {
    if (this.nexoEventUrls == null) {
      this.nexoEventUrls = new ArrayList<String>();
    }
    this.nexoEventUrls.add(nexoEventUrlsItem);
    return this;
  }

   /**
   * @deprecated One or more URLs to send event messages to when using Terminal API.
   * @return nexoEventUrls
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  @ApiModelProperty(value = "@deprecated One or more URLs to send event messages to when using Terminal API.")

  public List<String> getNexoEventUrls() {
    return nexoEventUrls;
  }


  public void setNexoEventUrls(List<String> nexoEventUrls) {
    this.nexoEventUrls = nexoEventUrls;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Nexo nexo = (Nexo) o;
    return Objects.equals(this.eventUrls, nexo.eventUrls) &&
        Objects.equals(this.nexoEventUrls, nexo.nexoEventUrls);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventUrls, nexoEventUrls);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Nexo {\n");
    sb.append("    eventUrls: ").append(toIndentedString(eventUrls)).append("\n");
    sb.append("    nexoEventUrls: ").append(toIndentedString(nexoEventUrls)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


/*
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to version 1 of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v1/companies/{companyId}/webhooks ```
 *
 * The version of the OpenAPI document: 1
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.MinorUnitsMonetaryValue;

/**
 * OfflineProcessing
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-30T16:56:39.721579+02:00[Europe/Amsterdam]")
public class OfflineProcessing {
  public static final String SERIALIZED_NAME_CHIP_FLOOR_LIMIT = "chipFloorLimit";
  @SerializedName(SERIALIZED_NAME_CHIP_FLOOR_LIMIT)
  private Integer chipFloorLimit;

  public static final String SERIALIZED_NAME_OFFLINE_SWIPE_LIMITS = "offlineSwipeLimits";
  @SerializedName(SERIALIZED_NAME_OFFLINE_SWIPE_LIMITS)
  private List<MinorUnitsMonetaryValue> offlineSwipeLimits = null;

  public OfflineProcessing() { 
  }

  public OfflineProcessing chipFloorLimit(Integer chipFloorLimit) {
    
    this.chipFloorLimit = chipFloorLimit;
    return this;
  }

   /**
   * The (inclusive) limit for accepting chip cards offline, in the processing currency, in minor units
   * @return chipFloorLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The (inclusive) limit for accepting chip cards offline, in the processing currency, in minor units")

  public Integer getChipFloorLimit() {
    return chipFloorLimit;
  }


  public void setChipFloorLimit(Integer chipFloorLimit) {
    this.chipFloorLimit = chipFloorLimit;
  }


  public OfflineProcessing offlineSwipeLimits(List<MinorUnitsMonetaryValue> offlineSwipeLimits) {
    
    this.offlineSwipeLimits = offlineSwipeLimits;
    return this;
  }

  public OfflineProcessing addOfflineSwipeLimitsItem(MinorUnitsMonetaryValue offlineSwipeLimitsItem) {
    if (this.offlineSwipeLimits == null) {
      this.offlineSwipeLimits = new ArrayList<MinorUnitsMonetaryValue>();
    }
    this.offlineSwipeLimits.add(offlineSwipeLimitsItem);
    return this;
  }

   /**
   * The maximum amount up to which swiped credit cards can be accepted offline, in the specified currency
   * @return offlineSwipeLimits
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The maximum amount up to which swiped credit cards can be accepted offline, in the specified currency")

  public List<MinorUnitsMonetaryValue> getOfflineSwipeLimits() {
    return offlineSwipeLimits;
  }


  public void setOfflineSwipeLimits(List<MinorUnitsMonetaryValue> offlineSwipeLimits) {
    this.offlineSwipeLimits = offlineSwipeLimits;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OfflineProcessing offlineProcessing = (OfflineProcessing) o;
    return Objects.equals(this.chipFloorLimit, offlineProcessing.chipFloorLimit) &&
        Objects.equals(this.offlineSwipeLimits, offlineProcessing.offlineSwipeLimits);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chipFloorLimit, offlineSwipeLimits);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OfflineProcessing {\n");
    sb.append("    chipFloorLimit: ").append(toIndentedString(chipFloorLimit)).append("\n");
    sb.append("    offlineSwipeLimits: ").append(toIndentedString(offlineSwipeLimits)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

